Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> <empty>
Rule 3     statements -> statements statement
Rule 4     statement -> expression ;
Rule 5     statement -> print_statement ;
Rule 6     statement -> declaration ;
Rule 7     statement -> block
Rule 8     statement -> if_statement
Rule 9     statement -> while_statement
Rule 10    statement -> function_statement
Rule 11    statement -> ;
Rule 12    statement -> FLOW_BREAK ;
Rule 13    statement -> RETURN_KEYWORD expression ;
Rule 14    if_statement -> FLOW_IF ( expression ) statement
Rule 15    if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement
Rule 16    while_statement -> FLOW_WHILE ( expression ) statement
Rule 17    function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement
Rule 18    comma_sep_args -> <empty>
Rule 19    comma_sep_args -> simple_declaration
Rule 20    comma_sep_args -> comma_sep_args , simple_declaration
Rule 21    block -> { new_scope statements }
Rule 22    new_scope -> <empty>
Rule 23    print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr )
Rule 24    non_empty_comma_sep_expr -> expression
Rule 25    non_empty_comma_sep_expr -> non_empty_comma_sep_expr , expression
Rule 26    expression -> var_usage = expression
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    expression -> - expression
Rule 32    expression -> ! expression
Rule 33    expression -> var_usage ASSIGN_ADD expression
Rule 34    expression -> var_usage ASSIGN_SUB expression
Rule 35    expression -> var_usage ASSIGN_DIV expression
Rule 36    expression -> var_usage ASSIGN_MULT expression
Rule 37    expression -> expression COMP_EQU expression
Rule 38    expression -> expression COMP_NEQU expression
Rule 39    expression -> expression COMP_LTE expression
Rule 40    expression -> expression COMP_LESS expression
Rule 41    expression -> expression COMP_GTR expression
Rule 42    expression -> expression COMP_GTE expression
Rule 43    expression -> expression BOOL_AND expression
Rule 44    expression -> expression BOOL_OR expression
Rule 45    simple_declaration -> type ID
Rule 46    assign_declaration -> simple_declaration = expression
Rule 47    declaration -> simple_declaration
Rule 48    declaration -> assign_declaration
Rule 49    var_usage -> ID
Rule 50    expression -> var_usage
Rule 51    expression -> CHAR_LITERAL
Rule 52    expression -> VAL_LITERAL
Rule 53    expression -> ( expression )
Rule 54    type -> TYPE
Rule 55    expression -> COMMAND_RANDOM ( expression )
Rule 56    expression -> ID . ID ( )
Rule 57    statement -> ID . ID ( expression )
Rule 58    expression -> STRING_LITERAL
Rule 59    type -> ARRAY_KEYWORD ( TYPE )
Rule 60    var_usage -> ID [ expression ]
Rule 61    type -> STRING_KEYWORD

Terminals, with rules where they appear

!                    : 32
(                    : 14 15 16 17 23 53 55 56 57 59
)                    : 14 15 16 17 23 53 55 56 57 59
*                    : 29
+                    : 27
,                    : 20 25
-                    : 28 31
.                    : 56 57
/                    : 30
;                    : 4 5 6 11 12 13
=                    : 26 46
ARRAY_KEYWORD        : 59
ASSIGN_ADD           : 33
ASSIGN_DIV           : 35
ASSIGN_MULT          : 36
ASSIGN_SUB           : 34
BOOL_AND             : 43
BOOL_OR              : 44
CHAR_LITERAL         : 51
COMMAND_PRINT        : 23
COMMAND_RANDOM       : 55
COMP_EQU             : 37
COMP_GTE             : 42
COMP_GTR             : 41
COMP_LESS            : 40
COMP_LTE             : 39
COMP_NEQU            : 38
DEFINE_KEYWORD       : 17
FLOW_BREAK           : 12
FLOW_ELSE            : 15
FLOW_IF              : 14 15
FLOW_WHILE           : 16
ID                   : 17 45 49 56 56 57 57 60
RETURN_KEYWORD       : 13
STRING_KEYWORD       : 61
STRING_LITERAL       : 58
TYPE                 : 54 59
VAL_LITERAL          : 52
[                    : 60
]                    : 60
error                : 
{                    : 21
}                    : 21

Nonterminals, with rules where they appear

assign_declaration   : 48
block                : 7
comma_sep_args       : 17 20
declaration          : 6
expression           : 4 13 14 15 16 24 25 26 27 27 28 28 29 29 30 30 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 46 53 55 57 60
function_statement   : 10
if_statement         : 8
new_scope            : 21
non_empty_comma_sep_expr : 23 25
print_statement      : 5
program              : 0
simple_declaration   : 19 20 46 47
statement            : 3 14 15 15 16 17
statements           : 1 3 21
type                 : 17 45
var_usage            : 26 33 34 35 36 50
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> .
    (3) statements -> . statements statement

    ;               reduce using rule 2 (statements -> .)
    FLOW_BREAK      reduce using rule 2 (statements -> .)
    RETURN_KEYWORD  reduce using rule 2 (statements -> .)
    ID              reduce using rule 2 (statements -> .)
    -               reduce using rule 2 (statements -> .)
    !               reduce using rule 2 (statements -> .)
    CHAR_LITERAL    reduce using rule 2 (statements -> .)
    VAL_LITERAL     reduce using rule 2 (statements -> .)
    (               reduce using rule 2 (statements -> .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> .)
    STRING_LITERAL  reduce using rule 2 (statements -> .)
    COMMAND_PRINT   reduce using rule 2 (statements -> .)
    {               reduce using rule 2 (statements -> .)
    FLOW_IF         reduce using rule 2 (statements -> .)
    FLOW_WHILE      reduce using rule 2 (statements -> .)
    DEFINE_KEYWORD  reduce using rule 2 (statements -> .)
    TYPE            reduce using rule 2 (statements -> .)
    ARRAY_KEYWORD   reduce using rule 2 (statements -> .)
    STRING_KEYWORD  reduce using rule 2 (statements -> .)
    $end            reduce using rule 2 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    $end            reduce using rule 1 (program -> statements .)
    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    simple_declaration             shift and go to state 23
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 29
    expression                     shift and go to state 11
    assign_declaration             shift and go to state 27
    block                          shift and go to state 10

state 3

    (9) statement -> while_statement .

    ;               reduce using rule 9 (statement -> while_statement .)
    FLOW_BREAK      reduce using rule 9 (statement -> while_statement .)
    RETURN_KEYWORD  reduce using rule 9 (statement -> while_statement .)
    ID              reduce using rule 9 (statement -> while_statement .)
    -               reduce using rule 9 (statement -> while_statement .)
    !               reduce using rule 9 (statement -> while_statement .)
    CHAR_LITERAL    reduce using rule 9 (statement -> while_statement .)
    VAL_LITERAL     reduce using rule 9 (statement -> while_statement .)
    (               reduce using rule 9 (statement -> while_statement .)
    COMMAND_RANDOM  reduce using rule 9 (statement -> while_statement .)
    STRING_LITERAL  reduce using rule 9 (statement -> while_statement .)
    COMMAND_PRINT   reduce using rule 9 (statement -> while_statement .)
    {               reduce using rule 9 (statement -> while_statement .)
    FLOW_IF         reduce using rule 9 (statement -> while_statement .)
    FLOW_WHILE      reduce using rule 9 (statement -> while_statement .)
    DEFINE_KEYWORD  reduce using rule 9 (statement -> while_statement .)
    TYPE            reduce using rule 9 (statement -> while_statement .)
    ARRAY_KEYWORD   reduce using rule 9 (statement -> while_statement .)
    STRING_KEYWORD  reduce using rule 9 (statement -> while_statement .)
    $end            reduce using rule 9 (statement -> while_statement .)
    }               reduce using rule 9 (statement -> while_statement .)
    FLOW_ELSE       reduce using rule 9 (statement -> while_statement .)


state 4

    (6) statement -> declaration . ;

    ;               shift and go to state 34


state 5

    (26) expression -> var_usage . = expression
    (33) expression -> var_usage . ASSIGN_ADD expression
    (34) expression -> var_usage . ASSIGN_SUB expression
    (35) expression -> var_usage . ASSIGN_DIV expression
    (36) expression -> var_usage . ASSIGN_MULT expression
    (50) expression -> var_usage .

    =               shift and go to state 39
    ASSIGN_ADD      shift and go to state 36
    ASSIGN_SUB      shift and go to state 38
    ASSIGN_DIV      shift and go to state 35
    ASSIGN_MULT     shift and go to state 37
    )               reduce using rule 50 (expression -> var_usage .)
    +               reduce using rule 50 (expression -> var_usage .)
    -               reduce using rule 50 (expression -> var_usage .)
    *               reduce using rule 50 (expression -> var_usage .)
    /               reduce using rule 50 (expression -> var_usage .)
    COMP_EQU        reduce using rule 50 (expression -> var_usage .)
    COMP_NEQU       reduce using rule 50 (expression -> var_usage .)
    COMP_LTE        reduce using rule 50 (expression -> var_usage .)
    COMP_LESS       reduce using rule 50 (expression -> var_usage .)
    COMP_GTR        reduce using rule 50 (expression -> var_usage .)
    COMP_GTE        reduce using rule 50 (expression -> var_usage .)
    BOOL_AND        reduce using rule 50 (expression -> var_usage .)
    BOOL_OR         reduce using rule 50 (expression -> var_usage .)
    ;               reduce using rule 50 (expression -> var_usage .)
    ,               reduce using rule 50 (expression -> var_usage .)
    ]               reduce using rule 50 (expression -> var_usage .)


state 6

    (12) statement -> FLOW_BREAK . ;

    ;               shift and go to state 40


state 7

    (16) while_statement -> FLOW_WHILE . ( expression ) statement

    (               shift and go to state 41


state 8

    (13) statement -> RETURN_KEYWORD . expression ;
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 42

state 9

    (14) if_statement -> FLOW_IF . ( expression ) statement
    (15) if_statement -> FLOW_IF . ( expression ) statement FLOW_ELSE statement

    (               shift and go to state 44


state 10

    (7) statement -> block .

    ;               reduce using rule 7 (statement -> block .)
    FLOW_BREAK      reduce using rule 7 (statement -> block .)
    RETURN_KEYWORD  reduce using rule 7 (statement -> block .)
    ID              reduce using rule 7 (statement -> block .)
    -               reduce using rule 7 (statement -> block .)
    !               reduce using rule 7 (statement -> block .)
    CHAR_LITERAL    reduce using rule 7 (statement -> block .)
    VAL_LITERAL     reduce using rule 7 (statement -> block .)
    (               reduce using rule 7 (statement -> block .)
    COMMAND_RANDOM  reduce using rule 7 (statement -> block .)
    STRING_LITERAL  reduce using rule 7 (statement -> block .)
    COMMAND_PRINT   reduce using rule 7 (statement -> block .)
    {               reduce using rule 7 (statement -> block .)
    FLOW_IF         reduce using rule 7 (statement -> block .)
    FLOW_WHILE      reduce using rule 7 (statement -> block .)
    DEFINE_KEYWORD  reduce using rule 7 (statement -> block .)
    TYPE            reduce using rule 7 (statement -> block .)
    ARRAY_KEYWORD   reduce using rule 7 (statement -> block .)
    STRING_KEYWORD  reduce using rule 7 (statement -> block .)
    $end            reduce using rule 7 (statement -> block .)
    }               reduce using rule 7 (statement -> block .)
    FLOW_ELSE       reduce using rule 7 (statement -> block .)


state 11

    (4) statement -> expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    ;               shift and go to state 45
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 12

    (52) expression -> VAL_LITERAL .

    )               reduce using rule 52 (expression -> VAL_LITERAL .)
    +               reduce using rule 52 (expression -> VAL_LITERAL .)
    -               reduce using rule 52 (expression -> VAL_LITERAL .)
    *               reduce using rule 52 (expression -> VAL_LITERAL .)
    /               reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_LESS       reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_GTR        reduce using rule 52 (expression -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 52 (expression -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 52 (expression -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 52 (expression -> VAL_LITERAL .)
    ;               reduce using rule 52 (expression -> VAL_LITERAL .)
    ,               reduce using rule 52 (expression -> VAL_LITERAL .)
    ]               reduce using rule 52 (expression -> VAL_LITERAL .)


state 13

    (10) statement -> function_statement .

    ;               reduce using rule 10 (statement -> function_statement .)
    FLOW_BREAK      reduce using rule 10 (statement -> function_statement .)
    RETURN_KEYWORD  reduce using rule 10 (statement -> function_statement .)
    ID              reduce using rule 10 (statement -> function_statement .)
    -               reduce using rule 10 (statement -> function_statement .)
    !               reduce using rule 10 (statement -> function_statement .)
    CHAR_LITERAL    reduce using rule 10 (statement -> function_statement .)
    VAL_LITERAL     reduce using rule 10 (statement -> function_statement .)
    (               reduce using rule 10 (statement -> function_statement .)
    COMMAND_RANDOM  reduce using rule 10 (statement -> function_statement .)
    STRING_LITERAL  reduce using rule 10 (statement -> function_statement .)
    COMMAND_PRINT   reduce using rule 10 (statement -> function_statement .)
    {               reduce using rule 10 (statement -> function_statement .)
    FLOW_IF         reduce using rule 10 (statement -> function_statement .)
    FLOW_WHILE      reduce using rule 10 (statement -> function_statement .)
    DEFINE_KEYWORD  reduce using rule 10 (statement -> function_statement .)
    TYPE            reduce using rule 10 (statement -> function_statement .)
    ARRAY_KEYWORD   reduce using rule 10 (statement -> function_statement .)
    STRING_KEYWORD  reduce using rule 10 (statement -> function_statement .)
    $end            reduce using rule 10 (statement -> function_statement .)
    }               reduce using rule 10 (statement -> function_statement .)
    FLOW_ELSE       reduce using rule 10 (statement -> function_statement .)


state 14

    (23) print_statement -> COMMAND_PRINT . ( non_empty_comma_sep_expr )

    (               shift and go to state 58


state 15

    (55) expression -> COMMAND_RANDOM . ( expression )

    (               shift and go to state 59


state 16

    (45) simple_declaration -> type . ID

    ID              shift and go to state 60


state 17

    (53) expression -> ( . expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 61

state 18

    (51) expression -> CHAR_LITERAL .

    )               reduce using rule 51 (expression -> CHAR_LITERAL .)
    +               reduce using rule 51 (expression -> CHAR_LITERAL .)
    -               reduce using rule 51 (expression -> CHAR_LITERAL .)
    *               reduce using rule 51 (expression -> CHAR_LITERAL .)
    /               reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_EQU        reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_NEQU       reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_LTE        reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_LESS       reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_GTR        reduce using rule 51 (expression -> CHAR_LITERAL .)
    COMP_GTE        reduce using rule 51 (expression -> CHAR_LITERAL .)
    BOOL_AND        reduce using rule 51 (expression -> CHAR_LITERAL .)
    BOOL_OR         reduce using rule 51 (expression -> CHAR_LITERAL .)
    ;               reduce using rule 51 (expression -> CHAR_LITERAL .)
    ,               reduce using rule 51 (expression -> CHAR_LITERAL .)
    ]               reduce using rule 51 (expression -> CHAR_LITERAL .)


state 19

    (17) function_statement -> DEFINE_KEYWORD . type ID ( comma_sep_args ) statement
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    type                           shift and go to state 62

state 20

    (58) expression -> STRING_LITERAL .

    )               reduce using rule 58 (expression -> STRING_LITERAL .)
    +               reduce using rule 58 (expression -> STRING_LITERAL .)
    -               reduce using rule 58 (expression -> STRING_LITERAL .)
    *               reduce using rule 58 (expression -> STRING_LITERAL .)
    /               reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_EQU        reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_NEQU       reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_LTE        reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_LESS       reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_GTR        reduce using rule 58 (expression -> STRING_LITERAL .)
    COMP_GTE        reduce using rule 58 (expression -> STRING_LITERAL .)
    BOOL_AND        reduce using rule 58 (expression -> STRING_LITERAL .)
    BOOL_OR         reduce using rule 58 (expression -> STRING_LITERAL .)
    ;               reduce using rule 58 (expression -> STRING_LITERAL .)
    ,               reduce using rule 58 (expression -> STRING_LITERAL .)
    ]               reduce using rule 58 (expression -> STRING_LITERAL .)


state 21

    (59) type -> ARRAY_KEYWORD . ( TYPE )

    (               shift and go to state 63


state 22

    (8) statement -> if_statement .

    ;               reduce using rule 8 (statement -> if_statement .)
    FLOW_BREAK      reduce using rule 8 (statement -> if_statement .)
    RETURN_KEYWORD  reduce using rule 8 (statement -> if_statement .)
    ID              reduce using rule 8 (statement -> if_statement .)
    -               reduce using rule 8 (statement -> if_statement .)
    !               reduce using rule 8 (statement -> if_statement .)
    CHAR_LITERAL    reduce using rule 8 (statement -> if_statement .)
    VAL_LITERAL     reduce using rule 8 (statement -> if_statement .)
    (               reduce using rule 8 (statement -> if_statement .)
    COMMAND_RANDOM  reduce using rule 8 (statement -> if_statement .)
    STRING_LITERAL  reduce using rule 8 (statement -> if_statement .)
    COMMAND_PRINT   reduce using rule 8 (statement -> if_statement .)
    {               reduce using rule 8 (statement -> if_statement .)
    FLOW_IF         reduce using rule 8 (statement -> if_statement .)
    FLOW_WHILE      reduce using rule 8 (statement -> if_statement .)
    DEFINE_KEYWORD  reduce using rule 8 (statement -> if_statement .)
    TYPE            reduce using rule 8 (statement -> if_statement .)
    ARRAY_KEYWORD   reduce using rule 8 (statement -> if_statement .)
    STRING_KEYWORD  reduce using rule 8 (statement -> if_statement .)
    $end            reduce using rule 8 (statement -> if_statement .)
    }               reduce using rule 8 (statement -> if_statement .)
    FLOW_ELSE       reduce using rule 8 (statement -> if_statement .)


state 23

    (47) declaration -> simple_declaration .
    (46) assign_declaration -> simple_declaration . = expression

    ;               reduce using rule 47 (declaration -> simple_declaration .)
    =               shift and go to state 64


state 24

    (5) statement -> print_statement . ;

    ;               shift and go to state 65


state 25

    (61) type -> STRING_KEYWORD .

    ID              reduce using rule 61 (type -> STRING_KEYWORD .)


state 26

    (57) statement -> ID . . ID ( expression )
    (56) expression -> ID . . ID ( )
    (49) var_usage -> ID .
    (60) var_usage -> ID . [ expression ]

    .               shift and go to state 67
    =               reduce using rule 49 (var_usage -> ID .)
    ASSIGN_ADD      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_SUB      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_DIV      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_MULT     reduce using rule 49 (var_usage -> ID .)
    ;               reduce using rule 49 (var_usage -> ID .)
    +               reduce using rule 49 (var_usage -> ID .)
    -               reduce using rule 49 (var_usage -> ID .)
    *               reduce using rule 49 (var_usage -> ID .)
    /               reduce using rule 49 (var_usage -> ID .)
    COMP_EQU        reduce using rule 49 (var_usage -> ID .)
    COMP_NEQU       reduce using rule 49 (var_usage -> ID .)
    COMP_LTE        reduce using rule 49 (var_usage -> ID .)
    COMP_LESS       reduce using rule 49 (var_usage -> ID .)
    COMP_GTR        reduce using rule 49 (var_usage -> ID .)
    COMP_GTE        reduce using rule 49 (var_usage -> ID .)
    BOOL_AND        reduce using rule 49 (var_usage -> ID .)
    BOOL_OR         reduce using rule 49 (var_usage -> ID .)
    [               shift and go to state 66


state 27

    (48) declaration -> assign_declaration .

    ;               reduce using rule 48 (declaration -> assign_declaration .)


state 28

    (32) expression -> ! . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 68

state 29

    (3) statements -> statements statement .

    }               reduce using rule 3 (statements -> statements statement .)
    ;               reduce using rule 3 (statements -> statements statement .)
    FLOW_BREAK      reduce using rule 3 (statements -> statements statement .)
    RETURN_KEYWORD  reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    -               reduce using rule 3 (statements -> statements statement .)
    !               reduce using rule 3 (statements -> statements statement .)
    CHAR_LITERAL    reduce using rule 3 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 3 (statements -> statements statement .)
    (               reduce using rule 3 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> statements statement .)
    STRING_LITERAL  reduce using rule 3 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 3 (statements -> statements statement .)
    {               reduce using rule 3 (statements -> statements statement .)
    FLOW_IF         reduce using rule 3 (statements -> statements statement .)
    FLOW_WHILE      reduce using rule 3 (statements -> statements statement .)
    DEFINE_KEYWORD  reduce using rule 3 (statements -> statements statement .)
    TYPE            reduce using rule 3 (statements -> statements statement .)
    ARRAY_KEYWORD   reduce using rule 3 (statements -> statements statement .)
    STRING_KEYWORD  reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)


state 30

    (31) expression -> - . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 69

state 31

    (11) statement -> ; .

    ;               reduce using rule 11 (statement -> ; .)
    FLOW_BREAK      reduce using rule 11 (statement -> ; .)
    RETURN_KEYWORD  reduce using rule 11 (statement -> ; .)
    ID              reduce using rule 11 (statement -> ; .)
    -               reduce using rule 11 (statement -> ; .)
    !               reduce using rule 11 (statement -> ; .)
    CHAR_LITERAL    reduce using rule 11 (statement -> ; .)
    VAL_LITERAL     reduce using rule 11 (statement -> ; .)
    (               reduce using rule 11 (statement -> ; .)
    COMMAND_RANDOM  reduce using rule 11 (statement -> ; .)
    STRING_LITERAL  reduce using rule 11 (statement -> ; .)
    COMMAND_PRINT   reduce using rule 11 (statement -> ; .)
    {               reduce using rule 11 (statement -> ; .)
    FLOW_IF         reduce using rule 11 (statement -> ; .)
    FLOW_WHILE      reduce using rule 11 (statement -> ; .)
    DEFINE_KEYWORD  reduce using rule 11 (statement -> ; .)
    TYPE            reduce using rule 11 (statement -> ; .)
    ARRAY_KEYWORD   reduce using rule 11 (statement -> ; .)
    STRING_KEYWORD  reduce using rule 11 (statement -> ; .)
    $end            reduce using rule 11 (statement -> ; .)
    }               reduce using rule 11 (statement -> ; .)
    FLOW_ELSE       reduce using rule 11 (statement -> ; .)


state 32

    (21) block -> { . new_scope statements }
    (22) new_scope -> .

    }               reduce using rule 22 (new_scope -> .)
    ;               reduce using rule 22 (new_scope -> .)
    FLOW_BREAK      reduce using rule 22 (new_scope -> .)
    RETURN_KEYWORD  reduce using rule 22 (new_scope -> .)
    ID              reduce using rule 22 (new_scope -> .)
    -               reduce using rule 22 (new_scope -> .)
    !               reduce using rule 22 (new_scope -> .)
    CHAR_LITERAL    reduce using rule 22 (new_scope -> .)
    VAL_LITERAL     reduce using rule 22 (new_scope -> .)
    (               reduce using rule 22 (new_scope -> .)
    COMMAND_RANDOM  reduce using rule 22 (new_scope -> .)
    STRING_LITERAL  reduce using rule 22 (new_scope -> .)
    COMMAND_PRINT   reduce using rule 22 (new_scope -> .)
    {               reduce using rule 22 (new_scope -> .)
    FLOW_IF         reduce using rule 22 (new_scope -> .)
    FLOW_WHILE      reduce using rule 22 (new_scope -> .)
    DEFINE_KEYWORD  reduce using rule 22 (new_scope -> .)
    TYPE            reduce using rule 22 (new_scope -> .)
    ARRAY_KEYWORD   reduce using rule 22 (new_scope -> .)
    STRING_KEYWORD  reduce using rule 22 (new_scope -> .)

    new_scope                      shift and go to state 70

state 33

    (54) type -> TYPE .

    ID              reduce using rule 54 (type -> TYPE .)


state 34

    (6) statement -> declaration ; .

    ;               reduce using rule 6 (statement -> declaration ; .)
    FLOW_BREAK      reduce using rule 6 (statement -> declaration ; .)
    RETURN_KEYWORD  reduce using rule 6 (statement -> declaration ; .)
    ID              reduce using rule 6 (statement -> declaration ; .)
    -               reduce using rule 6 (statement -> declaration ; .)
    !               reduce using rule 6 (statement -> declaration ; .)
    CHAR_LITERAL    reduce using rule 6 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 6 (statement -> declaration ; .)
    (               reduce using rule 6 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 6 (statement -> declaration ; .)
    STRING_LITERAL  reduce using rule 6 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 6 (statement -> declaration ; .)
    {               reduce using rule 6 (statement -> declaration ; .)
    FLOW_IF         reduce using rule 6 (statement -> declaration ; .)
    FLOW_WHILE      reduce using rule 6 (statement -> declaration ; .)
    DEFINE_KEYWORD  reduce using rule 6 (statement -> declaration ; .)
    TYPE            reduce using rule 6 (statement -> declaration ; .)
    ARRAY_KEYWORD   reduce using rule 6 (statement -> declaration ; .)
    STRING_KEYWORD  reduce using rule 6 (statement -> declaration ; .)
    $end            reduce using rule 6 (statement -> declaration ; .)
    }               reduce using rule 6 (statement -> declaration ; .)
    FLOW_ELSE       reduce using rule 6 (statement -> declaration ; .)


state 35

    (35) expression -> var_usage ASSIGN_DIV . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 71

state 36

    (33) expression -> var_usage ASSIGN_ADD . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 72

state 37

    (36) expression -> var_usage ASSIGN_MULT . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 73

state 38

    (34) expression -> var_usage ASSIGN_SUB . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 74

state 39

    (26) expression -> var_usage = . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 75

state 40

    (12) statement -> FLOW_BREAK ; .

    ;               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    FLOW_BREAK      reduce using rule 12 (statement -> FLOW_BREAK ; .)
    RETURN_KEYWORD  reduce using rule 12 (statement -> FLOW_BREAK ; .)
    ID              reduce using rule 12 (statement -> FLOW_BREAK ; .)
    -               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    !               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    CHAR_LITERAL    reduce using rule 12 (statement -> FLOW_BREAK ; .)
    VAL_LITERAL     reduce using rule 12 (statement -> FLOW_BREAK ; .)
    (               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    COMMAND_RANDOM  reduce using rule 12 (statement -> FLOW_BREAK ; .)
    STRING_LITERAL  reduce using rule 12 (statement -> FLOW_BREAK ; .)
    COMMAND_PRINT   reduce using rule 12 (statement -> FLOW_BREAK ; .)
    {               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    FLOW_IF         reduce using rule 12 (statement -> FLOW_BREAK ; .)
    FLOW_WHILE      reduce using rule 12 (statement -> FLOW_BREAK ; .)
    DEFINE_KEYWORD  reduce using rule 12 (statement -> FLOW_BREAK ; .)
    TYPE            reduce using rule 12 (statement -> FLOW_BREAK ; .)
    ARRAY_KEYWORD   reduce using rule 12 (statement -> FLOW_BREAK ; .)
    STRING_KEYWORD  reduce using rule 12 (statement -> FLOW_BREAK ; .)
    $end            reduce using rule 12 (statement -> FLOW_BREAK ; .)
    }               reduce using rule 12 (statement -> FLOW_BREAK ; .)
    FLOW_ELSE       reduce using rule 12 (statement -> FLOW_BREAK ; .)


state 41

    (16) while_statement -> FLOW_WHILE ( . expression ) statement
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 76

state 42

    (13) statement -> RETURN_KEYWORD expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    ;               shift and go to state 77
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 43

    (56) expression -> ID . . ID ( )
    (49) var_usage -> ID .
    (60) var_usage -> ID . [ expression ]

    .               shift and go to state 78
    =               reduce using rule 49 (var_usage -> ID .)
    ASSIGN_ADD      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_SUB      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_DIV      reduce using rule 49 (var_usage -> ID .)
    ASSIGN_MULT     reduce using rule 49 (var_usage -> ID .)
    +               reduce using rule 49 (var_usage -> ID .)
    -               reduce using rule 49 (var_usage -> ID .)
    *               reduce using rule 49 (var_usage -> ID .)
    /               reduce using rule 49 (var_usage -> ID .)
    COMP_EQU        reduce using rule 49 (var_usage -> ID .)
    COMP_NEQU       reduce using rule 49 (var_usage -> ID .)
    COMP_LTE        reduce using rule 49 (var_usage -> ID .)
    COMP_LESS       reduce using rule 49 (var_usage -> ID .)
    COMP_GTR        reduce using rule 49 (var_usage -> ID .)
    COMP_GTE        reduce using rule 49 (var_usage -> ID .)
    BOOL_AND        reduce using rule 49 (var_usage -> ID .)
    BOOL_OR         reduce using rule 49 (var_usage -> ID .)
    ;               reduce using rule 49 (var_usage -> ID .)
    )               reduce using rule 49 (var_usage -> ID .)
    ,               reduce using rule 49 (var_usage -> ID .)
    ]               reduce using rule 49 (var_usage -> ID .)
    [               shift and go to state 66


state 44

    (14) if_statement -> FLOW_IF ( . expression ) statement
    (15) if_statement -> FLOW_IF ( . expression ) statement FLOW_ELSE statement
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 79

state 45

    (4) statement -> expression ; .

    ;               reduce using rule 4 (statement -> expression ; .)
    FLOW_BREAK      reduce using rule 4 (statement -> expression ; .)
    RETURN_KEYWORD  reduce using rule 4 (statement -> expression ; .)
    ID              reduce using rule 4 (statement -> expression ; .)
    -               reduce using rule 4 (statement -> expression ; .)
    !               reduce using rule 4 (statement -> expression ; .)
    CHAR_LITERAL    reduce using rule 4 (statement -> expression ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> expression ; .)
    (               reduce using rule 4 (statement -> expression ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> expression ; .)
    STRING_LITERAL  reduce using rule 4 (statement -> expression ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> expression ; .)
    {               reduce using rule 4 (statement -> expression ; .)
    FLOW_IF         reduce using rule 4 (statement -> expression ; .)
    FLOW_WHILE      reduce using rule 4 (statement -> expression ; .)
    DEFINE_KEYWORD  reduce using rule 4 (statement -> expression ; .)
    TYPE            reduce using rule 4 (statement -> expression ; .)
    ARRAY_KEYWORD   reduce using rule 4 (statement -> expression ; .)
    STRING_KEYWORD  reduce using rule 4 (statement -> expression ; .)
    $end            reduce using rule 4 (statement -> expression ; .)
    }               reduce using rule 4 (statement -> expression ; .)
    FLOW_ELSE       reduce using rule 4 (statement -> expression ; .)


state 46

    (39) expression -> expression COMP_LTE . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 80

state 47

    (29) expression -> expression * . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 81

state 48

    (40) expression -> expression COMP_LESS . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 82

state 49

    (42) expression -> expression COMP_GTE . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 83

state 50

    (43) expression -> expression BOOL_AND . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 84

state 51

    (44) expression -> expression BOOL_OR . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 85

state 52

    (38) expression -> expression COMP_NEQU . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 86

state 53

    (27) expression -> expression + . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 87

state 54

    (30) expression -> expression / . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 88

state 55

    (28) expression -> expression - . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 89

state 56

    (37) expression -> expression COMP_EQU . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 90

state 57

    (41) expression -> expression COMP_GTR . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 91

state 58

    (23) print_statement -> COMMAND_PRINT ( . non_empty_comma_sep_expr )
    (24) non_empty_comma_sep_expr -> . expression
    (25) non_empty_comma_sep_expr -> . non_empty_comma_sep_expr , expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    non_empty_comma_sep_expr       shift and go to state 93
    var_usage                      shift and go to state 5
    expression                     shift and go to state 92

state 59

    (55) expression -> COMMAND_RANDOM ( . expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 94

state 60

    (45) simple_declaration -> type ID .

    =               reduce using rule 45 (simple_declaration -> type ID .)
    ;               reduce using rule 45 (simple_declaration -> type ID .)
    )               reduce using rule 45 (simple_declaration -> type ID .)
    ,               reduce using rule 45 (simple_declaration -> type ID .)


state 61

    (53) expression -> ( expression . )
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               shift and go to state 95
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 62

    (17) function_statement -> DEFINE_KEYWORD type . ID ( comma_sep_args ) statement

    ID              shift and go to state 96


state 63

    (59) type -> ARRAY_KEYWORD ( . TYPE )

    TYPE            shift and go to state 97


state 64

    (46) assign_declaration -> simple_declaration = . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 98

state 65

    (5) statement -> print_statement ; .

    ;               reduce using rule 5 (statement -> print_statement ; .)
    FLOW_BREAK      reduce using rule 5 (statement -> print_statement ; .)
    RETURN_KEYWORD  reduce using rule 5 (statement -> print_statement ; .)
    ID              reduce using rule 5 (statement -> print_statement ; .)
    -               reduce using rule 5 (statement -> print_statement ; .)
    !               reduce using rule 5 (statement -> print_statement ; .)
    CHAR_LITERAL    reduce using rule 5 (statement -> print_statement ; .)
    VAL_LITERAL     reduce using rule 5 (statement -> print_statement ; .)
    (               reduce using rule 5 (statement -> print_statement ; .)
    COMMAND_RANDOM  reduce using rule 5 (statement -> print_statement ; .)
    STRING_LITERAL  reduce using rule 5 (statement -> print_statement ; .)
    COMMAND_PRINT   reduce using rule 5 (statement -> print_statement ; .)
    {               reduce using rule 5 (statement -> print_statement ; .)
    FLOW_IF         reduce using rule 5 (statement -> print_statement ; .)
    FLOW_WHILE      reduce using rule 5 (statement -> print_statement ; .)
    DEFINE_KEYWORD  reduce using rule 5 (statement -> print_statement ; .)
    TYPE            reduce using rule 5 (statement -> print_statement ; .)
    ARRAY_KEYWORD   reduce using rule 5 (statement -> print_statement ; .)
    STRING_KEYWORD  reduce using rule 5 (statement -> print_statement ; .)
    $end            reduce using rule 5 (statement -> print_statement ; .)
    }               reduce using rule 5 (statement -> print_statement ; .)
    FLOW_ELSE       reduce using rule 5 (statement -> print_statement ; .)


state 66

    (60) var_usage -> ID [ . expression ]
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 99

state 67

    (57) statement -> ID . . ID ( expression )
    (56) expression -> ID . . ID ( )

    ID              shift and go to state 100


state 68

    (32) expression -> ! expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 32 (expression -> ! expression .)
    +               reduce using rule 32 (expression -> ! expression .)
    -               reduce using rule 32 (expression -> ! expression .)
    *               reduce using rule 32 (expression -> ! expression .)
    /               reduce using rule 32 (expression -> ! expression .)
    COMP_EQU        reduce using rule 32 (expression -> ! expression .)
    COMP_NEQU       reduce using rule 32 (expression -> ! expression .)
    COMP_LTE        reduce using rule 32 (expression -> ! expression .)
    COMP_LESS       reduce using rule 32 (expression -> ! expression .)
    COMP_GTR        reduce using rule 32 (expression -> ! expression .)
    COMP_GTE        reduce using rule 32 (expression -> ! expression .)
    BOOL_AND        reduce using rule 32 (expression -> ! expression .)
    BOOL_OR         reduce using rule 32 (expression -> ! expression .)
    ;               reduce using rule 32 (expression -> ! expression .)
    ,               reduce using rule 32 (expression -> ! expression .)
    ]               reduce using rule 32 (expression -> ! expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! *               [ shift and go to state 47 ]
  ! /               [ shift and go to state 54 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 69

    (31) expression -> - expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 31 (expression -> - expression .)
    +               reduce using rule 31 (expression -> - expression .)
    -               reduce using rule 31 (expression -> - expression .)
    *               reduce using rule 31 (expression -> - expression .)
    /               reduce using rule 31 (expression -> - expression .)
    COMP_EQU        reduce using rule 31 (expression -> - expression .)
    COMP_NEQU       reduce using rule 31 (expression -> - expression .)
    COMP_LTE        reduce using rule 31 (expression -> - expression .)
    COMP_LESS       reduce using rule 31 (expression -> - expression .)
    COMP_GTR        reduce using rule 31 (expression -> - expression .)
    COMP_GTE        reduce using rule 31 (expression -> - expression .)
    BOOL_AND        reduce using rule 31 (expression -> - expression .)
    BOOL_OR         reduce using rule 31 (expression -> - expression .)
    ;               reduce using rule 31 (expression -> - expression .)
    ,               reduce using rule 31 (expression -> - expression .)
    ]               reduce using rule 31 (expression -> - expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! *               [ shift and go to state 47 ]
  ! /               [ shift and go to state 54 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 70

    (21) block -> { new_scope . statements }
    (2) statements -> .
    (3) statements -> . statements statement

    }               reduce using rule 2 (statements -> .)
    ;               reduce using rule 2 (statements -> .)
    FLOW_BREAK      reduce using rule 2 (statements -> .)
    RETURN_KEYWORD  reduce using rule 2 (statements -> .)
    ID              reduce using rule 2 (statements -> .)
    -               reduce using rule 2 (statements -> .)
    !               reduce using rule 2 (statements -> .)
    CHAR_LITERAL    reduce using rule 2 (statements -> .)
    VAL_LITERAL     reduce using rule 2 (statements -> .)
    (               reduce using rule 2 (statements -> .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> .)
    STRING_LITERAL  reduce using rule 2 (statements -> .)
    COMMAND_PRINT   reduce using rule 2 (statements -> .)
    {               reduce using rule 2 (statements -> .)
    FLOW_IF         reduce using rule 2 (statements -> .)
    FLOW_WHILE      reduce using rule 2 (statements -> .)
    DEFINE_KEYWORD  reduce using rule 2 (statements -> .)
    TYPE            reduce using rule 2 (statements -> .)
    ARRAY_KEYWORD   reduce using rule 2 (statements -> .)
    STRING_KEYWORD  reduce using rule 2 (statements -> .)

    statements                     shift and go to state 101

state 71

    (35) expression -> var_usage ASSIGN_DIV expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .)
    ;               reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .)
    ,               reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .)
    ]               reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! +               [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! -               [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! *               [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! /               [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_EQU        [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_NEQU       [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_LTE        [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_LESS       [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_GTR        [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_GTE        [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! BOOL_AND        [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! BOOL_OR         [ reduce using rule 35 (expression -> var_usage ASSIGN_DIV expression .) ]


state 72

    (33) expression -> var_usage ASSIGN_ADD expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .)
    ;               reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .)
    ,               reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .)
    ]               reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! +               [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! -               [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! *               [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! /               [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_EQU        [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_NEQU       [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_LTE        [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_LESS       [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_GTR        [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_GTE        [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! BOOL_AND        [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! BOOL_OR         [ reduce using rule 33 (expression -> var_usage ASSIGN_ADD expression .) ]


state 73

    (36) expression -> var_usage ASSIGN_MULT expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .)
    ;               reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .)
    ,               reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .)
    ]               reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! +               [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! -               [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! *               [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! /               [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_EQU        [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_NEQU       [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_LTE        [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_LESS       [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_GTR        [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_GTE        [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! BOOL_AND        [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! BOOL_OR         [ reduce using rule 36 (expression -> var_usage ASSIGN_MULT expression .) ]


state 74

    (34) expression -> var_usage ASSIGN_SUB expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .)
    ;               reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .)
    ,               reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .)
    ]               reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! +               [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! -               [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! *               [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! /               [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_EQU        [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_NEQU       [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_LTE        [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_LESS       [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_GTR        [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_GTE        [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! BOOL_AND        [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! BOOL_OR         [ reduce using rule 34 (expression -> var_usage ASSIGN_SUB expression .) ]


state 75

    (26) expression -> var_usage = expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 26 (expression -> var_usage = expression .)
    ;               reduce using rule 26 (expression -> var_usage = expression .)
    ,               reduce using rule 26 (expression -> var_usage = expression .)
    ]               reduce using rule 26 (expression -> var_usage = expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51

  ! +               [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! -               [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! *               [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! /               [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_EQU        [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_NEQU       [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_LTE        [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_LESS       [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_GTR        [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! COMP_GTE        [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! BOOL_AND        [ reduce using rule 26 (expression -> var_usage = expression .) ]
  ! BOOL_OR         [ reduce using rule 26 (expression -> var_usage = expression .) ]


state 76

    (16) while_statement -> FLOW_WHILE ( expression . ) statement
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               shift and go to state 102
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 77

    (13) statement -> RETURN_KEYWORD expression ; .

    ;               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    FLOW_BREAK      reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    RETURN_KEYWORD  reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    ID              reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    -               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    !               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    CHAR_LITERAL    reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    VAL_LITERAL     reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    (               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    COMMAND_RANDOM  reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    STRING_LITERAL  reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    COMMAND_PRINT   reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    {               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    FLOW_IF         reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    FLOW_WHILE      reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    DEFINE_KEYWORD  reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    TYPE            reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    ARRAY_KEYWORD   reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    STRING_KEYWORD  reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    $end            reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    }               reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)
    FLOW_ELSE       reduce using rule 13 (statement -> RETURN_KEYWORD expression ; .)


state 78

    (56) expression -> ID . . ID ( )

    ID              shift and go to state 103


state 79

    (14) if_statement -> FLOW_IF ( expression . ) statement
    (15) if_statement -> FLOW_IF ( expression . ) statement FLOW_ELSE statement
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               shift and go to state 104
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 80

    (39) expression -> expression COMP_LTE expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_EQU        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_NEQU       reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_LTE        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_LESS       reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_GTR        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_GTE        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    BOOL_AND        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    BOOL_OR         reduce using rule 39 (expression -> expression COMP_LTE expression .)
    ;               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    ,               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    ]               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! -               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 81

    (29) expression -> expression * expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    COMP_EQU        reduce using rule 29 (expression -> expression * expression .)
    COMP_NEQU       reduce using rule 29 (expression -> expression * expression .)
    COMP_LTE        reduce using rule 29 (expression -> expression * expression .)
    COMP_LESS       reduce using rule 29 (expression -> expression * expression .)
    COMP_GTR        reduce using rule 29 (expression -> expression * expression .)
    COMP_GTE        reduce using rule 29 (expression -> expression * expression .)
    BOOL_AND        reduce using rule 29 (expression -> expression * expression .)
    BOOL_OR         reduce using rule 29 (expression -> expression * expression .)
    ;               reduce using rule 29 (expression -> expression * expression .)
    ,               reduce using rule 29 (expression -> expression * expression .)
    ]               reduce using rule 29 (expression -> expression * expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! *               [ shift and go to state 47 ]
  ! /               [ shift and go to state 54 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 82

    (40) expression -> expression COMP_LESS expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_EQU        reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_NEQU       reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_LTE        reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_LESS       reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_GTR        reduce using rule 40 (expression -> expression COMP_LESS expression .)
    COMP_GTE        reduce using rule 40 (expression -> expression COMP_LESS expression .)
    BOOL_AND        reduce using rule 40 (expression -> expression COMP_LESS expression .)
    BOOL_OR         reduce using rule 40 (expression -> expression COMP_LESS expression .)
    ;               reduce using rule 40 (expression -> expression COMP_LESS expression .)
    ,               reduce using rule 40 (expression -> expression COMP_LESS expression .)
    ]               reduce using rule 40 (expression -> expression COMP_LESS expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 40 (expression -> expression COMP_LESS expression .) ]
  ! -               [ reduce using rule 40 (expression -> expression COMP_LESS expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression COMP_LESS expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression COMP_LESS expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 83

    (42) expression -> expression COMP_GTE expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_EQU        reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_NEQU       reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_LTE        reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_LESS       reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_GTR        reduce using rule 42 (expression -> expression COMP_GTE expression .)
    COMP_GTE        reduce using rule 42 (expression -> expression COMP_GTE expression .)
    BOOL_AND        reduce using rule 42 (expression -> expression COMP_GTE expression .)
    BOOL_OR         reduce using rule 42 (expression -> expression COMP_GTE expression .)
    ;               reduce using rule 42 (expression -> expression COMP_GTE expression .)
    ,               reduce using rule 42 (expression -> expression COMP_GTE expression .)
    ]               reduce using rule 42 (expression -> expression COMP_GTE expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 42 (expression -> expression COMP_GTE expression .) ]
  ! -               [ reduce using rule 42 (expression -> expression COMP_GTE expression .) ]
  ! *               [ reduce using rule 42 (expression -> expression COMP_GTE expression .) ]
  ! /               [ reduce using rule 42 (expression -> expression COMP_GTE expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 84

    (43) expression -> expression BOOL_AND expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 43 (expression -> expression BOOL_AND expression .)
    BOOL_AND        reduce using rule 43 (expression -> expression BOOL_AND expression .)
    BOOL_OR         reduce using rule 43 (expression -> expression BOOL_AND expression .)
    ;               reduce using rule 43 (expression -> expression BOOL_AND expression .)
    ,               reduce using rule 43 (expression -> expression BOOL_AND expression .)
    ]               reduce using rule 43 (expression -> expression BOOL_AND expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49

  ! +               [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! -               [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! *               [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! /               [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_EQU        [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_NEQU       [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_LTE        [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_LESS       [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_GTR        [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! COMP_GTE        [ reduce using rule 43 (expression -> expression BOOL_AND expression .) ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 85

    (44) expression -> expression BOOL_OR expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 44 (expression -> expression BOOL_OR expression .)
    BOOL_OR         reduce using rule 44 (expression -> expression BOOL_OR expression .)
    ;               reduce using rule 44 (expression -> expression BOOL_OR expression .)
    ,               reduce using rule 44 (expression -> expression BOOL_OR expression .)
    ]               reduce using rule 44 (expression -> expression BOOL_OR expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50

  ! +               [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! -               [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! *               [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! /               [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_EQU        [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_NEQU       [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_LTE        [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_LESS       [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_GTR        [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! COMP_GTE        [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! BOOL_AND        [ reduce using rule 44 (expression -> expression BOOL_OR expression .) ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 86

    (38) expression -> expression COMP_NEQU expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_EQU        reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_NEQU       reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_LTE        reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_LESS       reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_GTR        reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    COMP_GTE        reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    BOOL_AND        reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    BOOL_OR         reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    ;               reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    ,               reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    ]               reduce using rule 38 (expression -> expression COMP_NEQU expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 38 (expression -> expression COMP_NEQU expression .) ]
  ! -               [ reduce using rule 38 (expression -> expression COMP_NEQU expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression COMP_NEQU expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression COMP_NEQU expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 87

    (27) expression -> expression + expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    COMP_EQU        reduce using rule 27 (expression -> expression + expression .)
    COMP_NEQU       reduce using rule 27 (expression -> expression + expression .)
    COMP_LTE        reduce using rule 27 (expression -> expression + expression .)
    COMP_LESS       reduce using rule 27 (expression -> expression + expression .)
    COMP_GTR        reduce using rule 27 (expression -> expression + expression .)
    COMP_GTE        reduce using rule 27 (expression -> expression + expression .)
    BOOL_AND        reduce using rule 27 (expression -> expression + expression .)
    BOOL_OR         reduce using rule 27 (expression -> expression + expression .)
    ;               reduce using rule 27 (expression -> expression + expression .)
    ,               reduce using rule 27 (expression -> expression + expression .)
    ]               reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 47
    /               shift and go to state 54

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 88

    (30) expression -> expression / expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    COMP_EQU        reduce using rule 30 (expression -> expression / expression .)
    COMP_NEQU       reduce using rule 30 (expression -> expression / expression .)
    COMP_LTE        reduce using rule 30 (expression -> expression / expression .)
    COMP_LESS       reduce using rule 30 (expression -> expression / expression .)
    COMP_GTR        reduce using rule 30 (expression -> expression / expression .)
    COMP_GTE        reduce using rule 30 (expression -> expression / expression .)
    BOOL_AND        reduce using rule 30 (expression -> expression / expression .)
    BOOL_OR         reduce using rule 30 (expression -> expression / expression .)
    ;               reduce using rule 30 (expression -> expression / expression .)
    ,               reduce using rule 30 (expression -> expression / expression .)
    ]               reduce using rule 30 (expression -> expression / expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! *               [ shift and go to state 47 ]
  ! /               [ shift and go to state 54 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 89

    (28) expression -> expression - expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    COMP_EQU        reduce using rule 28 (expression -> expression - expression .)
    COMP_NEQU       reduce using rule 28 (expression -> expression - expression .)
    COMP_LTE        reduce using rule 28 (expression -> expression - expression .)
    COMP_LESS       reduce using rule 28 (expression -> expression - expression .)
    COMP_GTR        reduce using rule 28 (expression -> expression - expression .)
    COMP_GTE        reduce using rule 28 (expression -> expression - expression .)
    BOOL_AND        reduce using rule 28 (expression -> expression - expression .)
    BOOL_OR         reduce using rule 28 (expression -> expression - expression .)
    ;               reduce using rule 28 (expression -> expression - expression .)
    ,               reduce using rule 28 (expression -> expression - expression .)
    ]               reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 47
    /               shift and go to state 54

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 55 ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 90

    (37) expression -> expression COMP_EQU expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_EQU        reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_NEQU       reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_LTE        reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_LESS       reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_GTR        reduce using rule 37 (expression -> expression COMP_EQU expression .)
    COMP_GTE        reduce using rule 37 (expression -> expression COMP_EQU expression .)
    BOOL_AND        reduce using rule 37 (expression -> expression COMP_EQU expression .)
    BOOL_OR         reduce using rule 37 (expression -> expression COMP_EQU expression .)
    ;               reduce using rule 37 (expression -> expression COMP_EQU expression .)
    ,               reduce using rule 37 (expression -> expression COMP_EQU expression .)
    ]               reduce using rule 37 (expression -> expression COMP_EQU expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 37 (expression -> expression COMP_EQU expression .) ]
  ! -               [ reduce using rule 37 (expression -> expression COMP_EQU expression .) ]
  ! *               [ reduce using rule 37 (expression -> expression COMP_EQU expression .) ]
  ! /               [ reduce using rule 37 (expression -> expression COMP_EQU expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 91

    (41) expression -> expression COMP_GTR expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_EQU        reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_NEQU       reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_LTE        reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_LESS       reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_GTR        reduce using rule 41 (expression -> expression COMP_GTR expression .)
    COMP_GTE        reduce using rule 41 (expression -> expression COMP_GTR expression .)
    BOOL_AND        reduce using rule 41 (expression -> expression COMP_GTR expression .)
    BOOL_OR         reduce using rule 41 (expression -> expression COMP_GTR expression .)
    ;               reduce using rule 41 (expression -> expression COMP_GTR expression .)
    ,               reduce using rule 41 (expression -> expression COMP_GTR expression .)
    ]               reduce using rule 41 (expression -> expression COMP_GTR expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54

  ! +               [ reduce using rule 41 (expression -> expression COMP_GTR expression .) ]
  ! -               [ reduce using rule 41 (expression -> expression COMP_GTR expression .) ]
  ! *               [ reduce using rule 41 (expression -> expression COMP_GTR expression .) ]
  ! /               [ reduce using rule 41 (expression -> expression COMP_GTR expression .) ]
  ! COMP_EQU        [ shift and go to state 56 ]
  ! COMP_NEQU       [ shift and go to state 52 ]
  ! COMP_LTE        [ shift and go to state 46 ]
  ! COMP_LESS       [ shift and go to state 48 ]
  ! COMP_GTR        [ shift and go to state 57 ]
  ! COMP_GTE        [ shift and go to state 49 ]
  ! BOOL_AND        [ shift and go to state 50 ]
  ! BOOL_OR         [ shift and go to state 51 ]


state 92

    (24) non_empty_comma_sep_expr -> expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 24 (non_empty_comma_sep_expr -> expression .)
    ,               reduce using rule 24 (non_empty_comma_sep_expr -> expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 93

    (23) print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr . )
    (25) non_empty_comma_sep_expr -> non_empty_comma_sep_expr . , expression

    )               shift and go to state 105
    ,               shift and go to state 106


state 94

    (55) expression -> COMMAND_RANDOM ( expression . )
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               shift and go to state 107
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 95

    (53) expression -> ( expression ) .

    )               reduce using rule 53 (expression -> ( expression ) .)
    +               reduce using rule 53 (expression -> ( expression ) .)
    -               reduce using rule 53 (expression -> ( expression ) .)
    *               reduce using rule 53 (expression -> ( expression ) .)
    /               reduce using rule 53 (expression -> ( expression ) .)
    COMP_EQU        reduce using rule 53 (expression -> ( expression ) .)
    COMP_NEQU       reduce using rule 53 (expression -> ( expression ) .)
    COMP_LTE        reduce using rule 53 (expression -> ( expression ) .)
    COMP_LESS       reduce using rule 53 (expression -> ( expression ) .)
    COMP_GTR        reduce using rule 53 (expression -> ( expression ) .)
    COMP_GTE        reduce using rule 53 (expression -> ( expression ) .)
    BOOL_AND        reduce using rule 53 (expression -> ( expression ) .)
    BOOL_OR         reduce using rule 53 (expression -> ( expression ) .)
    ;               reduce using rule 53 (expression -> ( expression ) .)
    ,               reduce using rule 53 (expression -> ( expression ) .)
    ]               reduce using rule 53 (expression -> ( expression ) .)


state 96

    (17) function_statement -> DEFINE_KEYWORD type ID . ( comma_sep_args ) statement

    (               shift and go to state 108


state 97

    (59) type -> ARRAY_KEYWORD ( TYPE . )

    )               shift and go to state 109


state 98

    (46) assign_declaration -> simple_declaration = expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    ;               reduce using rule 46 (assign_declaration -> simple_declaration = expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 99

    (60) var_usage -> ID [ expression . ]
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    ]               shift and go to state 110
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 100

    (57) statement -> ID . ID . ( expression )
    (56) expression -> ID . ID . ( )

    (               shift and go to state 111


state 101

    (21) block -> { new_scope statements . }
    (3) statements -> statements . statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    }               shift and go to state 112
    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    simple_declaration             shift and go to state 23
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 29
    expression                     shift and go to state 11
    assign_declaration             shift and go to state 27
    block                          shift and go to state 10

state 102

    (16) while_statement -> FLOW_WHILE ( expression ) . statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    assign_declaration             shift and go to state 27
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 113
    expression                     shift and go to state 11
    block                          shift and go to state 10
    simple_declaration             shift and go to state 23

state 103

    (56) expression -> ID . ID . ( )

    (               shift and go to state 114


state 104

    (14) if_statement -> FLOW_IF ( expression ) . statement
    (15) if_statement -> FLOW_IF ( expression ) . statement FLOW_ELSE statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    assign_declaration             shift and go to state 27
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 115
    expression                     shift and go to state 11
    block                          shift and go to state 10
    simple_declaration             shift and go to state 23

state 105

    (23) print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr ) .

    ;               reduce using rule 23 (print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr ) .)


state 106

    (25) non_empty_comma_sep_expr -> non_empty_comma_sep_expr , . expression
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 116

state 107

    (55) expression -> COMMAND_RANDOM ( expression ) .

    )               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    +               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    -               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    *               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    /               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_EQU        reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_NEQU       reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_LTE        reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_LESS       reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_GTR        reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_GTE        reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    BOOL_AND        reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    BOOL_OR         reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    ;               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    ,               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)
    ]               reduce using rule 55 (expression -> COMMAND_RANDOM ( expression ) .)


state 108

    (17) function_statement -> DEFINE_KEYWORD type ID ( . comma_sep_args ) statement
    (18) comma_sep_args -> .
    (19) comma_sep_args -> . simple_declaration
    (20) comma_sep_args -> . comma_sep_args , simple_declaration
    (45) simple_declaration -> . type ID
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    )               reduce using rule 18 (comma_sep_args -> .)
    ,               reduce using rule 18 (comma_sep_args -> .)
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    comma_sep_args                 shift and go to state 117
    type                           shift and go to state 16
    simple_declaration             shift and go to state 118

state 109

    (59) type -> ARRAY_KEYWORD ( TYPE ) .

    ID              reduce using rule 59 (type -> ARRAY_KEYWORD ( TYPE ) .)


state 110

    (60) var_usage -> ID [ expression ] .

    =               reduce using rule 60 (var_usage -> ID [ expression ] .)
    ASSIGN_ADD      reduce using rule 60 (var_usage -> ID [ expression ] .)
    ASSIGN_SUB      reduce using rule 60 (var_usage -> ID [ expression ] .)
    ASSIGN_DIV      reduce using rule 60 (var_usage -> ID [ expression ] .)
    ASSIGN_MULT     reduce using rule 60 (var_usage -> ID [ expression ] .)
    +               reduce using rule 60 (var_usage -> ID [ expression ] .)
    -               reduce using rule 60 (var_usage -> ID [ expression ] .)
    *               reduce using rule 60 (var_usage -> ID [ expression ] .)
    /               reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_EQU        reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_NEQU       reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_LTE        reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_LESS       reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_GTR        reduce using rule 60 (var_usage -> ID [ expression ] .)
    COMP_GTE        reduce using rule 60 (var_usage -> ID [ expression ] .)
    BOOL_AND        reduce using rule 60 (var_usage -> ID [ expression ] .)
    BOOL_OR         reduce using rule 60 (var_usage -> ID [ expression ] .)
    ;               reduce using rule 60 (var_usage -> ID [ expression ] .)
    )               reduce using rule 60 (var_usage -> ID [ expression ] .)
    ,               reduce using rule 60 (var_usage -> ID [ expression ] .)
    ]               reduce using rule 60 (var_usage -> ID [ expression ] .)


state 111

    (57) statement -> ID . ID ( . expression )
    (56) expression -> ID . ID ( . )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]

    )               shift and go to state 120
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    ID              shift and go to state 43
    STRING_LITERAL  shift and go to state 20

    var_usage                      shift and go to state 5
    expression                     shift and go to state 119

state 112

    (21) block -> { new_scope statements } .

    }               reduce using rule 21 (block -> { new_scope statements } .)
    ;               reduce using rule 21 (block -> { new_scope statements } .)
    FLOW_BREAK      reduce using rule 21 (block -> { new_scope statements } .)
    RETURN_KEYWORD  reduce using rule 21 (block -> { new_scope statements } .)
    ID              reduce using rule 21 (block -> { new_scope statements } .)
    -               reduce using rule 21 (block -> { new_scope statements } .)
    !               reduce using rule 21 (block -> { new_scope statements } .)
    CHAR_LITERAL    reduce using rule 21 (block -> { new_scope statements } .)
    VAL_LITERAL     reduce using rule 21 (block -> { new_scope statements } .)
    (               reduce using rule 21 (block -> { new_scope statements } .)
    COMMAND_RANDOM  reduce using rule 21 (block -> { new_scope statements } .)
    STRING_LITERAL  reduce using rule 21 (block -> { new_scope statements } .)
    COMMAND_PRINT   reduce using rule 21 (block -> { new_scope statements } .)
    {               reduce using rule 21 (block -> { new_scope statements } .)
    FLOW_IF         reduce using rule 21 (block -> { new_scope statements } .)
    FLOW_WHILE      reduce using rule 21 (block -> { new_scope statements } .)
    DEFINE_KEYWORD  reduce using rule 21 (block -> { new_scope statements } .)
    TYPE            reduce using rule 21 (block -> { new_scope statements } .)
    ARRAY_KEYWORD   reduce using rule 21 (block -> { new_scope statements } .)
    STRING_KEYWORD  reduce using rule 21 (block -> { new_scope statements } .)
    $end            reduce using rule 21 (block -> { new_scope statements } .)
    FLOW_ELSE       reduce using rule 21 (block -> { new_scope statements } .)


state 113

    (16) while_statement -> FLOW_WHILE ( expression ) statement .

    ;               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    FLOW_BREAK      reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    RETURN_KEYWORD  reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    ID              reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    -               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    !               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    CHAR_LITERAL    reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    VAL_LITERAL     reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    (               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    COMMAND_RANDOM  reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    COMMAND_PRINT   reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    {               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    FLOW_IF         reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    FLOW_WHILE      reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    DEFINE_KEYWORD  reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    TYPE            reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    ARRAY_KEYWORD   reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    STRING_KEYWORD  reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    $end            reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    }               reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)
    FLOW_ELSE       reduce using rule 16 (while_statement -> FLOW_WHILE ( expression ) statement .)


state 114

    (56) expression -> ID . ID ( . )

    )               shift and go to state 120


state 115

    (14) if_statement -> FLOW_IF ( expression ) statement .
    (15) if_statement -> FLOW_IF ( expression ) statement . FLOW_ELSE statement

    ;               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    FLOW_BREAK      reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    RETURN_KEYWORD  reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    ID              reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    -               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    !               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    CHAR_LITERAL    reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    VAL_LITERAL     reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    (               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    COMMAND_RANDOM  reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    COMMAND_PRINT   reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    {               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    FLOW_IF         reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    FLOW_WHILE      reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    DEFINE_KEYWORD  reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    TYPE            reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    ARRAY_KEYWORD   reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    STRING_KEYWORD  reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    $end            reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    }               reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .)
    FLOW_ELSE       shift and go to state 121

  ! FLOW_ELSE       [ reduce using rule 14 (if_statement -> FLOW_IF ( expression ) statement .) ]


state 116

    (25) non_empty_comma_sep_expr -> non_empty_comma_sep_expr , expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               reduce using rule 25 (non_empty_comma_sep_expr -> non_empty_comma_sep_expr , expression .)
    ,               reduce using rule 25 (non_empty_comma_sep_expr -> non_empty_comma_sep_expr , expression .)
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 117

    (17) function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args . ) statement
    (20) comma_sep_args -> comma_sep_args . , simple_declaration

    )               shift and go to state 122
    ,               shift and go to state 123


state 118

    (19) comma_sep_args -> simple_declaration .

    )               reduce using rule 19 (comma_sep_args -> simple_declaration .)
    ,               reduce using rule 19 (comma_sep_args -> simple_declaration .)


state 119

    (57) statement -> ID . ID ( expression . )
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (37) expression -> expression . COMP_EQU expression
    (38) expression -> expression . COMP_NEQU expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_LESS expression
    (41) expression -> expression . COMP_GTR expression
    (42) expression -> expression . COMP_GTE expression
    (43) expression -> expression . BOOL_AND expression
    (44) expression -> expression . BOOL_OR expression

    )               shift and go to state 124
    +               shift and go to state 53
    -               shift and go to state 55
    *               shift and go to state 47
    /               shift and go to state 54
    COMP_EQU        shift and go to state 56
    COMP_NEQU       shift and go to state 52
    COMP_LTE        shift and go to state 46
    COMP_LESS       shift and go to state 48
    COMP_GTR        shift and go to state 57
    COMP_GTE        shift and go to state 49
    BOOL_AND        shift and go to state 50
    BOOL_OR         shift and go to state 51


state 120

    (56) expression -> ID . ID ( ) .

    )               reduce using rule 56 (expression -> ID . ID ( ) .)
    +               reduce using rule 56 (expression -> ID . ID ( ) .)
    -               reduce using rule 56 (expression -> ID . ID ( ) .)
    *               reduce using rule 56 (expression -> ID . ID ( ) .)
    /               reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_EQU        reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_NEQU       reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_LTE        reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_LESS       reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_GTR        reduce using rule 56 (expression -> ID . ID ( ) .)
    COMP_GTE        reduce using rule 56 (expression -> ID . ID ( ) .)
    BOOL_AND        reduce using rule 56 (expression -> ID . ID ( ) .)
    BOOL_OR         reduce using rule 56 (expression -> ID . ID ( ) .)
    ;               reduce using rule 56 (expression -> ID . ID ( ) .)
    ,               reduce using rule 56 (expression -> ID . ID ( ) .)
    ]               reduce using rule 56 (expression -> ID . ID ( ) .)


state 121

    (15) if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE . statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    assign_declaration             shift and go to state 27
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 125
    expression                     shift and go to state 11
    block                          shift and go to state 10
    simple_declaration             shift and go to state 23

state 122

    (17) function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) . statement
    (4) statement -> . expression ;
    (5) statement -> . print_statement ;
    (6) statement -> . declaration ;
    (7) statement -> . block
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . function_statement
    (11) statement -> . ;
    (12) statement -> . FLOW_BREAK ;
    (13) statement -> . RETURN_KEYWORD expression ;
    (57) statement -> . ID . ID ( expression )
    (26) expression -> . var_usage = expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . - expression
    (32) expression -> . ! expression
    (33) expression -> . var_usage ASSIGN_ADD expression
    (34) expression -> . var_usage ASSIGN_SUB expression
    (35) expression -> . var_usage ASSIGN_DIV expression
    (36) expression -> . var_usage ASSIGN_MULT expression
    (37) expression -> . expression COMP_EQU expression
    (38) expression -> . expression COMP_NEQU expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_LESS expression
    (41) expression -> . expression COMP_GTR expression
    (42) expression -> . expression COMP_GTE expression
    (43) expression -> . expression BOOL_AND expression
    (44) expression -> . expression BOOL_OR expression
    (50) expression -> . var_usage
    (51) expression -> . CHAR_LITERAL
    (52) expression -> . VAL_LITERAL
    (53) expression -> . ( expression )
    (55) expression -> . COMMAND_RANDOM ( expression )
    (56) expression -> . ID . ID ( )
    (58) expression -> . STRING_LITERAL
    (23) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (47) declaration -> . simple_declaration
    (48) declaration -> . assign_declaration
    (21) block -> . { new_scope statements }
    (14) if_statement -> . FLOW_IF ( expression ) statement
    (15) if_statement -> . FLOW_IF ( expression ) statement FLOW_ELSE statement
    (16) while_statement -> . FLOW_WHILE ( expression ) statement
    (17) function_statement -> . DEFINE_KEYWORD type ID ( comma_sep_args ) statement
    (49) var_usage -> . ID
    (60) var_usage -> . ID [ expression ]
    (45) simple_declaration -> . type ID
    (46) assign_declaration -> . simple_declaration = expression
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    ;               shift and go to state 31
    FLOW_BREAK      shift and go to state 6
    RETURN_KEYWORD  shift and go to state 8
    ID              shift and go to state 26
    -               shift and go to state 30
    !               shift and go to state 28
    CHAR_LITERAL    shift and go to state 18
    VAL_LITERAL     shift and go to state 12
    (               shift and go to state 17
    COMMAND_RANDOM  shift and go to state 15
    STRING_LITERAL  shift and go to state 20
    COMMAND_PRINT   shift and go to state 14
    {               shift and go to state 32
    FLOW_IF         shift and go to state 9
    FLOW_WHILE      shift and go to state 7
    DEFINE_KEYWORD  shift and go to state 19
    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    print_statement                shift and go to state 24
    while_statement                shift and go to state 3
    type                           shift and go to state 16
    function_statement             shift and go to state 13
    declaration                    shift and go to state 4
    assign_declaration             shift and go to state 27
    var_usage                      shift and go to state 5
    if_statement                   shift and go to state 22
    statement                      shift and go to state 126
    simple_declaration             shift and go to state 23
    block                          shift and go to state 10
    expression                     shift and go to state 11

state 123

    (20) comma_sep_args -> comma_sep_args , . simple_declaration
    (45) simple_declaration -> . type ID
    (54) type -> . TYPE
    (59) type -> . ARRAY_KEYWORD ( TYPE )
    (61) type -> . STRING_KEYWORD

    TYPE            shift and go to state 33
    ARRAY_KEYWORD   shift and go to state 21
    STRING_KEYWORD  shift and go to state 25

    type                           shift and go to state 16
    simple_declaration             shift and go to state 127

state 124

    (57) statement -> ID . ID ( expression ) .

    ;               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    FLOW_BREAK      reduce using rule 57 (statement -> ID . ID ( expression ) .)
    RETURN_KEYWORD  reduce using rule 57 (statement -> ID . ID ( expression ) .)
    ID              reduce using rule 57 (statement -> ID . ID ( expression ) .)
    -               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    !               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    CHAR_LITERAL    reduce using rule 57 (statement -> ID . ID ( expression ) .)
    VAL_LITERAL     reduce using rule 57 (statement -> ID . ID ( expression ) .)
    (               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    COMMAND_RANDOM  reduce using rule 57 (statement -> ID . ID ( expression ) .)
    STRING_LITERAL  reduce using rule 57 (statement -> ID . ID ( expression ) .)
    COMMAND_PRINT   reduce using rule 57 (statement -> ID . ID ( expression ) .)
    {               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    FLOW_IF         reduce using rule 57 (statement -> ID . ID ( expression ) .)
    FLOW_WHILE      reduce using rule 57 (statement -> ID . ID ( expression ) .)
    DEFINE_KEYWORD  reduce using rule 57 (statement -> ID . ID ( expression ) .)
    TYPE            reduce using rule 57 (statement -> ID . ID ( expression ) .)
    ARRAY_KEYWORD   reduce using rule 57 (statement -> ID . ID ( expression ) .)
    STRING_KEYWORD  reduce using rule 57 (statement -> ID . ID ( expression ) .)
    $end            reduce using rule 57 (statement -> ID . ID ( expression ) .)
    }               reduce using rule 57 (statement -> ID . ID ( expression ) .)
    FLOW_ELSE       reduce using rule 57 (statement -> ID . ID ( expression ) .)


state 125

    (15) if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .

    ;               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    FLOW_BREAK      reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    RETURN_KEYWORD  reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    ID              reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    -               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    !               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    CHAR_LITERAL    reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    VAL_LITERAL     reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    (               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    COMMAND_RANDOM  reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    STRING_LITERAL  reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    COMMAND_PRINT   reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    {               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    FLOW_IF         reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    FLOW_WHILE      reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    DEFINE_KEYWORD  reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    TYPE            reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    ARRAY_KEYWORD   reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    STRING_KEYWORD  reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    $end            reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    }               reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)
    FLOW_ELSE       reduce using rule 15 (if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement .)


state 126

    (17) function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .

    ;               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    FLOW_BREAK      reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    RETURN_KEYWORD  reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    ID              reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    -               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    !               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    CHAR_LITERAL    reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    VAL_LITERAL     reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    (               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    COMMAND_RANDOM  reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    STRING_LITERAL  reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    COMMAND_PRINT   reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    {               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    FLOW_IF         reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    FLOW_WHILE      reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    DEFINE_KEYWORD  reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    TYPE            reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    ARRAY_KEYWORD   reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    STRING_KEYWORD  reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    $end            reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    }               reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)
    FLOW_ELSE       reduce using rule 17 (function_statement -> DEFINE_KEYWORD type ID ( comma_sep_args ) statement .)


state 127

    (20) comma_sep_args -> comma_sep_args , simple_declaration .

    )               reduce using rule 20 (comma_sep_args -> comma_sep_args , simple_declaration .)
    ,               reduce using rule 20 (comma_sep_args -> comma_sep_args , simple_declaration .)

