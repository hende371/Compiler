
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocFLOW_ELSEright=ASSIGN_ADDASSIGN_SUBASSIGN_MULTASSIGN_DIVleftBOOL_ORleftBOOL_ANDnonassocCOMP_EQUCOMP_NEQUCOMP_LESSCOMP_LTECOMP_GTRCOMP_GTEleft+-left*/nonassoc!UMINUSID VAL_LITERAL CHAR_LITERAL STRING_LITERAL ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV COMP_EQU COMP_NEQU COMP_LESS COMP_LTE COMP_GTR COMP_GTE BOOL_AND BOOL_OR FLOW_BREAK TYPE STRING_KEYWORD DEFINE_KEYWORD COMMAND_RANDOM COMMAND_PRINT ARRAY_KEYWORD FLOW_IF FLOW_ELSE FLOW_WHILE RETURN_KEYWORD\n    program : statements\n    \n    statements :\n    \n    statements : statements statement\n    \n    statement : expression ';'\n              | print_statement ';'\n              | declaration ';'\n              | block\n              | if_statement\n              | while_statement\n              | function_statement\n    \n    statement : ';'\n    \n    statement : FLOW_BREAK ';'\n    \n    statement : RETURN_KEYWORD expression ';'\n    \n    if_statement : FLOW_IF '(' expression ')' statement %prec IFX\n    \n    if_statement : FLOW_IF '(' expression ')' statement FLOW_ELSE statement\n    \n    while_statement : FLOW_WHILE '(' expression ')' statement\n    \n    function_statement : DEFINE_KEYWORD type ID '(' new_scope comma_sep_args ')' statement\n    \n    expression : ID '(' comma_sep_expr ')'\n    \n    comma_sep_args : \n    \n    comma_sep_args : simple_declaration\n    \n    comma_sep_args : comma_sep_args ',' simple_declaration\n    \n    block : '{' new_scope statements '}'\n    new_scope :\n    print_statement : COMMAND_PRINT '(' non_empty_comma_sep_expr ')'\n    \n    non_empty_comma_sep_expr : expression\n    \n    non_empty_comma_sep_expr : non_empty_comma_sep_expr ',' expression\n    \n    comma_sep_expr : \n    \n    comma_sep_expr : expression\n    \n    comma_sep_expr : non_empty_comma_sep_expr ',' expression\n    \n    expression : var_usage '=' expression\n    \n    expression : expression '+' expression\n               | expression '-' expression\n               | expression '*' expression\n               | expression '/' expression\n    \n    expression : '-' expression %prec UMINUS\n    \n    expression : '!' expression\n    \n    expression : var_usage ASSIGN_ADD expression\n               | var_usage ASSIGN_SUB expression\n               | var_usage ASSIGN_DIV expression\n               | var_usage ASSIGN_MULT expression\n    \n    expression : expression COMP_EQU expression\n               | expression COMP_NEQU expression\n               | expression COMP_LTE expression\n               | expression COMP_LESS expression\n               | expression COMP_GTR expression\n               | expression COMP_GTE expression\n    \n    expression : expression BOOL_AND expression\n               | expression BOOL_OR expression\n    \n    simple_declaration : type ID\n    \n    assign_declaration : simple_declaration '=' expression\n    \n    declaration : simple_declaration\n                | assign_declaration\n    \n    var_usage : ID\n    \n    expression : var_usage\n    \n    expression : CHAR_LITERAL\n    \n    expression : VAL_LITERAL\n    \n    expression : '(' expression ')'\n    \n    type : TYPE\n    \n    expression : COMMAND_RANDOM '(' expression ')'\n    \n    expression : ID '.' ID '(' ')'\n    \n    statement : ID '.' ID '(' expression ')'\n    \n    expression : STRING_LITERAL\n    \n    type : ARRAY_KEYWORD '(' TYPE ')'\n    \n    var_usage : ID '[' expression ']'\n    \n    type : STRING_KEYWORD\n    "
    
_lr_action_items = {'+':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,47,-62,-56,-55,-54,-53,-36,47,-35,47,47,47,47,47,47,-57,47,-31,-32,47,47,47,47,47,-34,47,-33,47,47,47,47,47,47,47,47,-64,-18,-59,-60,47,47,47,]),'COMP_LTE':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,50,-62,-56,-55,-54,-53,-36,50,-35,50,50,50,50,50,50,-57,50,-31,-32,None,None,None,None,None,-34,None,-33,50,50,50,50,50,50,50,50,-64,-18,-59,-60,50,50,50,]),'FLOW_BREAK':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,3,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,3,-13,3,3,-22,-14,-16,3,-61,-15,3,-17,]),'-':([0,2,5,6,11,14,15,17,19,21,22,24,25,27,29,30,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,67,68,69,70,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,120,121,122,123,124,125,127,128,131,132,134,],[-2,19,19,-10,-53,19,-8,48,19,-62,-23,-3,-56,-9,-55,-54,-7,19,-11,-12,-53,-36,-6,19,19,19,19,19,48,19,19,19,19,19,19,19,19,19,19,19,19,19,-4,19,-35,-2,-5,19,19,19,19,19,48,48,48,48,48,48,-57,48,-31,-32,48,48,48,48,48,-34,48,-33,48,48,48,19,48,48,48,48,48,-13,19,19,-64,-18,19,19,19,-59,-22,-14,-60,48,48,48,-16,19,-61,-15,19,-17,]),'TYPE':([0,2,6,15,22,24,27,28,31,33,34,38,59,62,63,64,97,105,107,114,116,118,120,125,126,127,128,131,132,133,134,],[-2,20,-10,-8,-23,-3,-9,20,-7,-11,-12,-6,-4,-2,98,-5,20,-13,20,20,-22,-23,-14,-16,20,20,-61,-15,20,20,-17,]),'!':([0,2,5,6,14,15,19,22,24,27,31,32,33,34,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,97,105,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,5,5,-10,5,-8,5,-23,-3,-9,-7,5,-11,-12,-6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-4,5,-2,-5,5,5,5,5,5,5,-13,5,5,5,5,5,-22,-14,-16,5,-61,-15,5,-17,]),')':([21,25,29,30,35,36,37,43,45,61,74,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,100,101,102,103,104,108,109,110,115,118,119,121,122,123,124,126,129,130,135,],[-62,-56,-55,-54,-49,-53,-36,-27,82,-35,107,110,-28,113,-25,-57,114,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,-48,-47,115,117,-39,-37,-30,-40,-38,121,-64,-18,-59,-23,121,-60,128,-29,-26,-19,-20,132,-21,]),']':([21,25,29,30,36,37,61,76,82,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,103,104,109,110,115,121,],[-62,-56,-55,-54,-53,-36,-35,109,-57,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,-48,-47,-39,-37,-30,-40,-38,-64,-18,-59,-60,]),'COMMAND_RANDOM':([0,2,5,6,14,15,19,22,24,27,31,32,33,34,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,97,105,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,18,18,-10,18,-8,18,-23,-3,-9,-7,18,-11,-12,-6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-4,18,-2,-5,18,18,18,18,18,18,-13,18,18,18,18,18,-22,-14,-16,18,-61,-15,18,-17,]),'ARRAY_KEYWORD':([0,2,6,15,22,24,27,28,31,33,34,38,59,62,64,97,105,107,114,116,118,120,125,126,127,128,131,132,133,134,],[-2,23,-10,-8,-23,-3,-9,23,-7,-11,-12,-6,-4,-2,-5,23,-13,23,23,-22,-23,-14,-16,23,23,-61,-15,23,23,-17,]),'.':([11,36,],[41,72,]),'{':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,22,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,22,-13,22,22,-22,-14,-16,22,-61,-15,22,-17,]),'FLOW_IF':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,9,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,9,-13,9,9,-22,-14,-16,9,-61,-15,9,-17,]),'ASSIGN_ADD':([11,30,36,109,],[-53,67,-53,-64,]),'BOOL_OR':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,57,-62,-56,-55,-54,-53,-36,57,-35,57,57,57,57,57,57,-57,57,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,-48,-47,57,57,57,57,57,57,-64,-18,-59,-60,57,57,57,]),',':([21,25,29,30,35,36,37,61,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,103,104,109,110,115,118,121,123,124,126,129,130,135,],[-62,-56,-55,-54,-49,-53,-36,-35,111,-25,112,-25,-57,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,-48,-47,-39,-37,-30,-40,-38,-64,-18,-59,-23,-60,-26,-26,-19,-20,133,-21,]),'=':([8,11,30,35,36,109,],[39,-53,68,-49,-53,-64,]),'}':([6,15,22,24,27,31,33,34,38,59,62,64,97,105,116,120,125,128,131,134,],[-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,116,-13,-22,-14,-16,-61,-15,-17,]),'VAL_LITERAL':([0,2,5,6,14,15,19,22,24,27,31,32,33,34,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,97,105,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,25,25,-10,25,-8,25,-23,-3,-9,-7,25,-11,-12,-6,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-4,25,-2,-5,25,25,25,25,25,25,-13,25,25,25,25,25,-22,-14,-16,25,-61,-15,25,-17,]),'COMP_LESS':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,51,-62,-56,-55,-54,-53,-36,51,-35,51,51,51,51,51,51,-57,51,-31,-32,None,None,None,None,None,-34,None,-33,51,51,51,51,51,51,51,51,-64,-18,-59,-60,51,51,51,]),'BOOL_AND':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,58,-62,-56,-55,-54,-53,-36,58,-35,58,58,58,58,58,58,-57,58,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,58,-47,58,58,58,58,58,58,-64,-18,-59,-60,58,58,58,]),'$end':([0,1,2,6,15,24,27,31,33,34,38,59,64,105,116,120,125,128,131,134,],[-2,0,-1,-10,-8,-3,-9,-7,-11,-12,-6,-4,-5,-13,-22,-14,-16,-61,-15,-17,]),'STRING_LITERAL':([0,2,5,6,14,15,19,22,24,27,31,32,33,34,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,97,105,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,21,21,-10,21,-8,21,-23,-3,-9,-7,21,-11,-12,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-4,21,-2,-5,21,21,21,21,21,21,-13,21,21,21,21,21,-22,-14,-16,21,-61,-15,21,-17,]),'COMP_GTE':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,55,-62,-56,-55,-54,-53,-36,55,-35,55,55,55,55,55,55,-57,55,-31,-32,None,None,None,None,None,-34,None,-33,55,55,55,55,55,55,55,55,-64,-18,-59,-60,55,55,55,]),'ID':([0,2,4,5,6,12,14,15,19,20,22,24,27,31,32,33,34,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,65,66,67,68,69,70,72,97,105,107,108,111,112,114,116,117,120,125,127,128,131,132,134,],[-2,11,35,36,-10,-65,36,-8,36,-58,-23,-3,-9,-7,36,-11,-12,-6,36,36,75,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-4,36,-2,-5,99,36,36,36,36,36,106,11,-13,11,36,36,36,11,-22,-63,-14,-16,11,-61,-15,11,-17,]),'ASSIGN_MULT':([11,30,36,109,],[-53,69,-53,-64,]),'STRING_KEYWORD':([0,2,6,15,22,24,27,28,31,33,34,38,59,62,64,97,105,107,114,116,118,120,125,126,127,128,131,132,133,134,],[-2,12,-10,-8,-23,-3,-9,12,-7,-11,-12,-6,-4,-2,-5,12,-13,12,12,-22,-23,-14,-16,12,12,-61,-15,12,12,-17,]),'DEFINE_KEYWORD':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,28,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,28,-13,28,28,-22,-14,-16,28,-61,-15,28,-17,]),'COMMAND_PRINT':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,13,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,13,-13,13,13,-22,-14,-16,13,-61,-15,13,-17,]),'CHAR_LITERAL':([0,2,5,6,14,15,19,22,24,27,31,32,33,34,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,97,105,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,29,29,-10,29,-8,29,-23,-3,-9,-7,29,-11,-12,-6,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-4,29,-2,-5,29,29,29,29,29,29,-13,29,29,29,29,29,-22,-14,-16,29,-61,-15,29,-17,]),'COMP_EQU':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,52,-62,-56,-55,-54,-53,-36,52,-35,52,52,52,52,52,52,-57,52,-31,-32,None,None,None,None,None,-34,None,-33,52,52,52,52,52,52,52,52,-64,-18,-59,-60,52,52,52,]),'(':([0,2,5,6,9,11,13,14,15,16,18,19,22,23,24,27,31,32,33,34,36,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,70,75,97,99,105,106,107,108,111,112,114,116,120,125,127,128,131,132,134,],[-2,14,14,-10,40,43,44,14,-8,46,60,14,-23,63,-3,-9,-7,14,-11,-12,43,-6,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-4,14,-2,-5,14,14,14,14,14,108,14,118,-13,119,14,14,14,14,14,-22,-14,-16,14,-61,-15,14,-17,]),'ASSIGN_SUB':([11,30,36,109,],[-53,70,-53,-64,]),'COMP_GTR':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,53,-62,-56,-55,-54,-53,-36,53,-35,53,53,53,53,53,53,-57,53,-31,-32,None,None,None,None,None,-34,None,-33,53,53,53,53,53,53,53,53,-64,-18,-59,-60,53,53,53,]),'/':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,54,-62,-56,-55,-54,-53,-36,54,-35,54,54,54,54,54,54,-57,54,54,54,54,54,54,54,54,-34,54,-33,54,54,54,54,54,54,54,54,-64,-18,-59,-60,54,54,54,]),'[':([11,36,],[42,42,]),'*':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,56,-62,-56,-55,-54,-53,-36,56,-35,56,56,56,56,56,56,-57,56,56,56,56,56,56,56,56,-34,56,-33,56,56,56,56,56,56,56,56,-64,-18,-59,-60,56,56,56,]),'FLOW_ELSE':([6,15,27,31,33,34,38,59,64,105,116,120,125,128,131,134,],[-10,-8,-9,-7,-11,-12,-6,-4,-5,-13,-22,127,-16,-61,-15,-17,]),'ASSIGN_DIV':([11,30,36,109,],[-53,66,-53,-64,]),'FLOW_WHILE':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,16,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,16,-13,16,16,-22,-14,-16,16,-61,-15,16,-17,]),'RETURN_KEYWORD':([0,2,6,15,22,24,27,31,33,34,38,59,62,64,97,105,107,114,116,120,125,127,128,131,132,134,],[-2,32,-10,-8,-23,-3,-9,-7,-11,-12,-6,-4,-2,-5,32,-13,32,32,-22,-14,-16,32,-61,-15,32,-17,]),'COMP_NEQU':([11,17,21,25,29,30,36,37,45,61,71,73,74,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,109,110,115,121,122,123,124,],[-53,49,-62,-56,-55,-54,-53,-36,49,-35,49,49,49,49,49,49,-57,49,-31,-32,None,None,None,None,None,-34,None,-33,49,49,49,49,49,49,49,49,-64,-18,-59,-60,49,49,49,]),';':([0,2,3,6,7,8,10,11,15,17,21,22,24,25,26,27,29,30,31,33,34,35,36,37,38,59,61,62,64,71,73,82,84,85,86,87,88,89,90,91,92,93,94,95,97,100,101,102,103,104,105,107,109,110,113,114,115,116,120,121,125,127,128,131,132,134,],[-2,33,34,-10,38,-51,-52,-53,-8,59,-62,-23,-3,-56,64,-9,-55,-54,-7,-11,-12,-49,-53,-36,-6,-4,-35,-2,-5,105,-50,-57,-31,-32,-42,-43,-44,-41,-45,-34,-46,-33,-48,-47,33,-39,-37,-30,-40,-38,-13,33,-64,-18,-24,33,-59,-22,-14,-60,-16,33,-61,-15,33,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'print_statement':([2,97,107,114,127,132,],[26,26,26,26,26,26,]),'new_scope':([22,118,],[62,126,]),'while_statement':([2,97,107,114,127,132,],[27,27,27,27,27,27,]),'type':([2,28,97,107,114,126,127,132,133,],[4,65,4,4,4,4,4,4,4,]),'comma_sep_expr':([43,],[77,]),'statements':([0,62,],[2,97,]),'function_statement':([2,97,107,114,127,132,],[6,6,6,6,6,6,]),'if_statement':([2,97,107,114,127,132,],[15,15,15,15,15,15,]),'declaration':([2,97,107,114,127,132,],[7,7,7,7,7,7,]),'non_empty_comma_sep_expr':([43,44,],[78,80,]),'statement':([2,97,107,114,127,132,],[24,24,120,125,131,134,]),'assign_declaration':([2,97,107,114,127,132,],[10,10,10,10,10,10,]),'var_usage':([2,5,14,19,32,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,66,67,68,69,70,97,107,108,111,112,114,127,132,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'program':([0,],[1,]),'simple_declaration':([2,97,107,114,126,127,132,133,],[8,8,8,8,129,8,8,135,]),'block':([2,97,107,114,127,132,],[31,31,31,31,31,31,]),'expression':([2,5,14,19,32,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,66,67,68,69,70,97,107,108,111,112,114,127,132,],[17,37,45,61,71,73,74,76,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,17,17,122,123,124,17,17,17,]),'comma_sep_args':([126,],[130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','my_parser.py',28),
  ('statements -> <empty>','statements',0,'p_statements_empty','my_parser.py',35),
  ('statements -> statements statement','statements',2,'p_statements_nonempty','my_parser.py',42),
  ('statement -> expression ;','statement',2,'p_statement_rules','my_parser.py',50),
  ('statement -> print_statement ;','statement',2,'p_statement_rules','my_parser.py',51),
  ('statement -> declaration ;','statement',2,'p_statement_rules','my_parser.py',52),
  ('statement -> block','statement',1,'p_statement_rules','my_parser.py',53),
  ('statement -> if_statement','statement',1,'p_statement_rules','my_parser.py',54),
  ('statement -> while_statement','statement',1,'p_statement_rules','my_parser.py',55),
  ('statement -> function_statement','statement',1,'p_statement_rules','my_parser.py',56),
  ('statement -> ;','statement',1,'p_empty_statement','my_parser.py',63),
  ('statement -> FLOW_BREAK ;','statement',2,'p_break','my_parser.py',70),
  ('statement -> RETURN_KEYWORD expression ;','statement',3,'p_return','my_parser.py',76),
  ('if_statement -> FLOW_IF ( expression ) statement','if_statement',5,'p_if_statement','my_parser.py',84),
  ('if_statement -> FLOW_IF ( expression ) statement FLOW_ELSE statement','if_statement',7,'p_if_else_statement','my_parser.py',91),
  ('while_statement -> FLOW_WHILE ( expression ) statement','while_statement',5,'p_while_statement','my_parser.py',98),
  ('function_statement -> DEFINE_KEYWORD type ID ( new_scope comma_sep_args ) statement','function_statement',8,'p_function_statement','my_parser.py',105),
  ('expression -> ID ( comma_sep_expr )','expression',4,'p_function_call','my_parser.py',119),
  ('comma_sep_args -> <empty>','comma_sep_args',0,'p_comma_sep_argument_none','my_parser.py',127),
  ('comma_sep_args -> simple_declaration','comma_sep_args',1,'p_comma_sep_argument_1','my_parser.py',134),
  ('comma_sep_args -> comma_sep_args , simple_declaration','comma_sep_args',3,'p_comma_sep_argument_many','my_parser.py',141),
  ('block -> { new_scope statements }','block',4,'p_block','my_parser.py',149),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','my_parser.py',158),
  ('print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr )','print_statement',4,'p_print_statement','my_parser.py',166),
  ('non_empty_comma_sep_expr -> expression','non_empty_comma_sep_expr',1,'p_comma_sep_expression_1','my_parser.py',174),
  ('non_empty_comma_sep_expr -> non_empty_comma_sep_expr , expression','non_empty_comma_sep_expr',3,'p_comma_sep_expression_many','my_parser.py',181),
  ('comma_sep_expr -> <empty>','comma_sep_expr',0,'p_comma_sep_expr_0','my_parser.py',189),
  ('comma_sep_expr -> expression','comma_sep_expr',1,'p_comma_sep_expr_1','my_parser.py',196),
  ('comma_sep_expr -> non_empty_comma_sep_expr , expression','comma_sep_expr',3,'p_comma_sep_expr_many','my_parser.py',203),
  ('expression -> var_usage = expression','expression',3,'p_assignment','my_parser.py',211),
  ('expression -> expression + expression','expression',3,'p_binary_math','my_parser.py',218),
  ('expression -> expression - expression','expression',3,'p_binary_math','my_parser.py',219),
  ('expression -> expression * expression','expression',3,'p_binary_math','my_parser.py',220),
  ('expression -> expression / expression','expression',3,'p_binary_math','my_parser.py',221),
  ('expression -> - expression','expression',2,'p_unary_minus','my_parser.py',228),
  ('expression -> ! expression','expression',2,'p_not','my_parser.py',236),
  ('expression -> var_usage ASSIGN_ADD expression','expression',3,'p_compound_math','my_parser.py',243),
  ('expression -> var_usage ASSIGN_SUB expression','expression',3,'p_compound_math','my_parser.py',244),
  ('expression -> var_usage ASSIGN_DIV expression','expression',3,'p_compound_math','my_parser.py',245),
  ('expression -> var_usage ASSIGN_MULT expression','expression',3,'p_compound_math','my_parser.py',246),
  ('expression -> expression COMP_EQU expression','expression',3,'p_comparisons','my_parser.py',255),
  ('expression -> expression COMP_NEQU expression','expression',3,'p_comparisons','my_parser.py',256),
  ('expression -> expression COMP_LTE expression','expression',3,'p_comparisons','my_parser.py',257),
  ('expression -> expression COMP_LESS expression','expression',3,'p_comparisons','my_parser.py',258),
  ('expression -> expression COMP_GTR expression','expression',3,'p_comparisons','my_parser.py',259),
  ('expression -> expression COMP_GTE expression','expression',3,'p_comparisons','my_parser.py',260),
  ('expression -> expression BOOL_AND expression','expression',3,'p_boolean_operators','my_parser.py',267),
  ('expression -> expression BOOL_OR expression','expression',3,'p_boolean_operators','my_parser.py',268),
  ('simple_declaration -> type ID','simple_declaration',2,'p_simple_declaration','my_parser.py',275),
  ('assign_declaration -> simple_declaration = expression','assign_declaration',3,'p_assign_declaration','my_parser.py',282),
  ('declaration -> simple_declaration','declaration',1,'p_declaration','my_parser.py',289),
  ('declaration -> assign_declaration','declaration',1,'p_declaration','my_parser.py',290),
  ('var_usage -> ID','var_usage',1,'p_var_usage','my_parser.py',297),
  ('expression -> var_usage','expression',1,'p_value','my_parser.py',304),
  ('expression -> CHAR_LITERAL','expression',1,'p_char_literal','my_parser.py',311),
  ('expression -> VAL_LITERAL','expression',1,'p_val_literal','my_parser.py',318),
  ('expression -> ( expression )','expression',3,'p_parentheses','my_parser.py',325),
  ('type -> TYPE','type',1,'p_type','my_parser.py',332),
  ('expression -> COMMAND_RANDOM ( expression )','expression',4,'p_random','my_parser.py',339),
  ('expression -> ID . ID ( )','expression',5,'p_array_size','my_parser.py',346),
  ('statement -> ID . ID ( expression )','statement',6,'p_array_resize','my_parser.py',357),
  ('expression -> STRING_LITERAL','expression',1,'p_string_literal','my_parser.py',370),
  ('type -> ARRAY_KEYWORD ( TYPE )','type',4,'p_array_type','my_parser.py',377),
  ('var_usage -> ID [ expression ]','var_usage',4,'p_indexing','my_parser.py',384),
  ('type -> STRING_KEYWORD','type',1,'p_string_type','my_parser.py',391),
]
